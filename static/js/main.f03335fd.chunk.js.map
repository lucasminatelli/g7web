{"version":3,"sources":["components/Bank/index.ts","components/Bank/Bank.tsx","components/Display/index.ts","components/Display/Display.tsx","components/Switch/Switch.tsx","components/Switch/index.ts","components/G7/G7.tsx","components/G7/index.ts","components/MIDIConnection/MIDIConnection.tsx","components/MIDIConnection/index.ts","App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["Bank","mprops","className","onChange","e","isConnected","WebMidi","getOutputById","inputs","id","getOutputByName","name","sendProgramChange","Number","handleChange","target","value","banks","map","b","position","Display","useState","setInputs","useEffect","state","Switch","c","n","eff","efx","filter","item","update","push","controller","enabled","setEfx","output","sendControlChange","onClick","G7","effects","MIDIConnection","isSysexEnabled","setIsSysexEnabled","setIsConnected","enable","err","console","warn","addListener","src","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f03335fd.chunk.js","sourcesContent":["import Bank from \"./Bank\";\nexport default Bank;\n","import banks from '../../data/banks.json';\nimport './styles.scss';\n\ninterface MIDIProps {\n    WebMidi: any,\n    isConnected: boolean\n}\n\nexport default function Bank(mprops: MIDIProps) {\n\n    const handleChange = (e: any) => {\n        if (mprops.isConnected === true) {\n            var output = mprops.WebMidi.getOutputById(mprops.WebMidi.inputs[0].id);\n            output = mprops.WebMidi.getOutputByName(mprops.WebMidi.inputs[0].name);\n            output.sendProgramChange(Number(e), [\"all\"], \"all\");\n        }\n    };\n\n    return (\n        <div>\n            <div className=\"Bank-container\">\n                <select className=\"Bank-select\"\n                    onChange={(e) => handleChange(e.target.value)}>\n                    {banks.map(b => (\n                        <option key={b.value} value={b.value}>{b.name} .{b.position}</option>\n                    ))}\n                </select>\n            </div>\n        </div>\n    )\n}\n","import { Display } from \"./Display\";\nexport default Display;\n","import React, { useEffect, useState } from 'react';\nimport Bank from '../Bank';\nimport './styles.scss';\n\ninterface WebMIDIProps {\n    WebMidi: any,\n    isConnected: boolean\n}\n\ninterface IOProps {\n    connection?: string,\n    id?: string,\n    manufacturer?: string,\n    name?: string,\n    state?: string,\n    type?: string\n}\n\nexport function Display(mprops: WebMIDIProps) {\n    const [inputs, setInputs] = useState<IOProps>({});\n\n    useEffect(() => {\n        if (mprops.isConnected === true) {\n            setInputs(mprops.WebMidi.inputs[0]);\n        }\n    }, [mprops.isConnected, mprops.WebMidi.inputs])\n\n    return (\n        <div className=\"Display-container\">\n            <Bank WebMidi={mprops.WebMidi} isConnected={mprops.isConnected} />\n            <div className=\"Display-body\">\n                <p className=\"Display-words\">\n                    Device: {inputs.name}\n                    <br />\n                    Status: {inputs.state}\n                </p>\n            </div>\n        </div>\n    )\n}\n","import \"./styles.scss\";\ninterface MIDIProps {\n  WebMidi: any,\n  isConnected: boolean,\n  name: string,\n  controller: number,\n  enabled: boolean,\n  efx: any,\n  setEfx: any,\n}\n\nfunction Switch(mprops: MIDIProps) {\n  const handleChange = (e: any, c: number, n: string) => {\n    const eff = mprops.efx.filter((item: { name: string; }) => item.name === n);\n    const update = mprops.efx.filter((item: { name: string, }) => item.name !== n);\n    update.push({\n      name: eff[0].name,\n      controller: eff[0].controller,\n      enabled: !eff[0].enabled,\n    })\n    mprops.setEfx(update)\n    if (mprops.isConnected === true) {\n      var output = mprops.WebMidi.getOutputById(mprops.WebMidi.inputs[0].id);\n      output = mprops.WebMidi.getOutputByName(mprops.WebMidi.inputs[0].name);\n      e === true ? output.sendControlChange(c, 127, \"all\") : output.sendControlChange(c, 0, \"all\");\n    }\n  };\n  return (\n    <div className='Switch-container'>\n      <p>{mprops?.name}</p>\n      {mprops?.enabled ? <div className='Switch-circle' onClick={() =>\n        handleChange(mprops.enabled, mprops.controller, mprops.name)}>\n      </div> : <div className='Switch-circle enabled' onClick={() =>\n        handleChange(mprops.enabled, mprops.controller, mprops.name)}>\n      </div>}\n\n    </div>\n  )\n}\n\nexport default Switch;","import Switch from \"./Switch\";\nexport default Switch;","import React, { useState } from 'react';\nimport Display from '../Display';\nimport Switch from '../Switch';\nimport './styles.scss';\nimport effects from \"../../data/effects.json\";\n\ninterface WebMIDIProps {\n    WebMidi: any,\n    isConnected: boolean\n}\n\nfunction G7(mprops: WebMIDIProps) {\n    const [efx, setEfx] = useState(effects);\n\n    return (\n        <>\n            <section className=\"G7-container\">\n                <div className=\"G7-body\">\n                    <section>\n                        <Display WebMidi={mprops.WebMidi} isConnected={mprops.isConnected} />\n                        <div className=\"G7-efx-chain\">\n                            {\n                                efx.map(e => {\n                                    return (\n                                        <Switch\n                                            key={e?.controller}\n                                            WebMidi={mprops?.WebMidi}\n                                            isConnected={mprops?.isConnected}\n                                            name={e?.name}\n                                            controller={e?.controller}\n                                            enabled={e?.enabled}\n                                            efx={efx}\n                                            setEfx={setEfx}\n                                        />\n                                    )\n                                })\n                            }\n                        </div>\n                    </section>\n                    <section className=\"G7-expression\">\n                        <span>ZOOM</span>\n                    </section>\n                </div>\n            </section>\n        </>\n    )\n}\n\nexport default G7;\n","import G7 from \"./G7\";\nexport default G7;\n","import React, { useEffect, useState } from 'react';\nimport WebMidi from 'webmidi';\nimport G7 from '../G7';\nimport './styles.scss';\n\nfunction MIDIConnection() {\n    const [isSysexEnabled, setIsSysexEnabled] = useState<boolean>(false);\n    const [isConnected, setIsConnected] = useState<boolean>(false);\n\n    // Hooks\n    useEffect(() => {\n        enableSysex();\n        checkConnection();\n    })\n\n    // Functions\n    function enableSysex() {\n        WebMidi.enable(function (err) {\n            if (err) {\n                console.warn(err);\n            } else {\n                setIsSysexEnabled(true);\n            }\n        }, true);\n    }\n\n    function checkConnection() {\n        if (isSysexEnabled === true) {\n            WebMidi.addListener(\"connected\", function (e) {\n                setIsConnected(true);\n            });\n            WebMidi.addListener(\"disconnected\", function (e) {\n                setIsConnected(false);\n            });\n        } else {\n            setIsSysexEnabled(false);\n        }\n    }\n\n    // Return\n    return (\n        <div className=\"MIDIConnection-container\">\n            <header className=\"MIDIConnection-body\" >\n                {isConnected === true ?\n                    <G7 WebMidi={WebMidi} isConnected={isConnected} />\n                    :\n                    <>\n                        <img className=\"MIDIConnection-logo\" src=\"midiconnector.png\" alt=\"MIDI Connect\" />\n                        please connect your MIDI Adpater\n                        <div className=\"MIDIConnection-disconnected\">disconnected</div>\n                        <div className=\"MIDIConnection-loading\" />\n                    </>\n                }\n            </header>\n        </div>\n    )\n}\n\nexport default MIDIConnection;","import MIDIConnection from \"./MIDIConnection\";\nexport default MIDIConnection;\n","import MIDIConnection from \"./components/MIDIConnection\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MIDIConnection />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();"],"sourceRoot":""}